module faction
extends "entity.pkl" 
import "entity.pkl" as Entity
import "types.pkl" as $t

hidden factionContents: Mapping<String, Entity>
hidden guestHeroes: Listing<Entity>

hidden fixed all = factionContents.toMap().values

local guest = guestHeroes.toList()
local getslug = (x) -> x.slug

local isHero = (x) -> x.type == "unit" && x.subtype == "hero"
local isUnit = (x) -> x.type == "unit" && x.subtype != "hero"
local isBuilding = (x) -> x.type == "building"

local isTalent = (x) -> x.type == "faction-ability" && x.subtype == "talent"
local isTopbar = (x) -> x.type == "faction-ability" && x.subtype == "topbar"
local isPassive = (x) -> x.type == "faction-ability" && x.subtype == "passive"

local function grab(x: List<Entity>, y: (Entity) -> Boolean) = x.filter(y).map(getslug)

fixed faction: String? = slug
mercHeroesAllowed: Boolean = true

fixed hero: Listing<String> = new {
  ...grab(guest, isHero)
  ...grab(all, isHero)
}
fixed unit: Listing<String> = new { ...grab(all, isUnit) }
fixed building: Listing<String> = new { ...grab(all, isBuilding) }
fixed talent: Listing<String> = new { ...grab(all, isTalent) }
fixed topbar: Listing<String> = new { ...grab(all, isTopbar) }
fixed passive: Listing<String> = new { ...grab(all, isPassive) }
