module faction
extends "entity.pkl"
import "entity.pkl" as Entity
import "talent.pkl" as Talent
import "topbar.pkl" as TopBar
import "faction_passive.pkl" as FactionPassive
import "types.pkl" as $t

hidden factionContents: Mapping<String, Entity>
hidden guestHeroes: Listing<Entity>

hidden fixed all = factionContents.toMap().values

local guest = guestHeroes.toList()
local getslug = (x) -> x.slug

local isHero = (x) -> x.type == "unit" && x.subtype == "hero"
local isUnit = (x) -> x.type == "unit" && x.subtype != "hero"
local isBuilding = (x) -> x.type == "building"

local isTalent = (x) -> x.type == "faction-ability" && x.subtype == "talent"
local isTopbar = (x) -> x.type == "faction-ability" && x.subtype == "topbar"
local isPassive = (x) -> x.type == "faction-ability" && x.subtype == "passive"

local function grab(x: List<Entity>, y: (Entity) -> Boolean) = x.filter(y).map(getslug)
local function grabFull(x: List<Entity>, y: (Entity) -> Boolean) = x.filter(y)

fixed faction: String? = slug
mercHeroesAllowed: Boolean = true

fixed hero: Listing<String> = new {
  ...grab(guest, isHero)
  ...grab(all, isHero)
}
fixed unit: Listing<String> = new { ...grab(all, isUnit) }
fixed building: Listing<String> = new { ...grab(all, isBuilding) }
fixed talent: Mapping<String, Talent> = new { ...grabFull(all, isTalent).toMap((e) -> e.slug, (e) -> e) }
fixed topbar: Mapping<String, TopBar> = new { ...grabFull(all, isTopbar).toMap((e) -> e.slug, (e) -> e) }
fixed passive: Mapping<String, FactionPassive> = new { ...grabFull(all, isPassive).toMap((e) -> e.slug, (e) -> e) }
