module addOn
extends "gamepiece_child.pkl"
import "parent_info.pkl" as ParentInfo
import "ability.pkl" as Ability
import "types.pkl" as $t
import "add_on.pkl" as me
local methis = this

fixed type: String = "add-on"
fixed subtype: String = addOnType

hidden fixed dynamicTags { 
  when (subtype == "turret") { "turret" } 
  when (subtype == "sacrifice") { "bonus:sacrifice" }
  when (subtype == "building-upgrade") { "building:upgrade" }
}
addOnType: "turret" | "sacrifice"  | "building-upgrade" | "building-turret"

local parentInfo: ParentInfo = new {
  id = methis.id
  slug = methis.slug
  src = methis.src
  fromPath = methis.parent.fromPath
}

hidden attacks: Mapping<String, Ability> = (super.attacks) {
  default { key -> name = $t.makeSlug(key); parent = parentInfo; abilityType = "attack" }
}
attack: Listing<String> = new {
  for (Attack in attacks) { Attack.slug }
}

hidden heals: Mapping<String, Ability> = (super.heals) {
  default { key -> name = $t.makeSlug(key); parent = parentInfo; abilityType = "heal" }
}
heal: Listing<String> = new {
  for (Heal in heals) { Heal.slug }
}

hidden spells: Mapping<String, Ability> = (super.spells) {
  default { key -> name = $t.makeSlug(key); parent = parentInfo; abilityType = "spell" }
}
spell: Listing<String> = new {
  for (Spell in spells) { Spell.slug }
}

hidden passives: Mapping<String, Ability> = (super.passives) {
  default { key -> name = $t.makeSlug(key); parent = parentInfo; abilityType = "passive" }
}
passive: Listing<String> = new {
  for (Passive in passives) { Passive.slug }
}

hidden fixed children = List(attacks, heals, spells, passives).flatMap((x) -> x.toMap().values.toList())
