abstract module unit 
extends "../gamepiece.pkl"

import "../infuse.pkl" as $i
import "../upgrade/unit_upgrade.pkl" as UnitUpgrade
import "../building/constructing_unit.pkl" as ConstructingUnit

fixed type = "unit"
fixed subtype = unit_type

constructing_version: ConstructingUnit?

tag { "unit" }
hidden unit_type: "worker" | "harvester" | "army" | "hero"

vision = 1800

local tl = tags.toList()

infusable: Boolean = unit_type == "army" && !tl.contains("massive")

infuse_rule: $i.InfuseRule? = 
  if (!infusable) 
    null 
  else
    $i.standard_infuse_rule

infuse_cost: Number? = 
  if (!infusable) 
    null 
  else
    let (h = (hexite_cost ?? 0))
    let (f = (flux_cost ?? 0))
    let (b = (build_count ?? 1))
    (((h + f) / b) / 10.0 ).floor + 1 // it may have been ceil but seedling cost was 1 before it was adjusted to 2 (seedling is 0 cost so 1 infuse means floor+1), but maybe 1 was a manual adjust and it was ceil all along

local df = this.faction
local ds = this.slug

upgrades: Listing<UnitUpgrade> = new Listing<UnitUpgrade> {
  default { faction = df; upgrade_of = ds }
}
