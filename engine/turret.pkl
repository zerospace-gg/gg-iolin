module turret
extends "gamepiece_child.pkl"
import "parent_info.pkl" as ParentInfo
import "ability.pkl" as Ability
import "types.pkl" as $t
import "turret.pkl" as me
local methis = this

fixed type = "turret"
fixed subtype = turret_type

tags { 
  when (subtype == "turret") { "turret" } 
  when (subtype == "sacrifice") { "bonus:sacrifice" }
}
turret_type: "turret" | "sacrifice" 

local parent_info: ParentInfo = new {
  id = methis.id
  slug = methis.slug
  src = methis.src
  from_path = methis.parent.from_path
}

attacks {
  default { key -> name = $t.makeSlug(key); parent = parent_info; ability_type = "attack" }
}

heals {
  default { key -> name = $t.makeSlug(key); parent = parent_info; ability_type = "heal" }
}

spells {
  default { key -> name = $t.makeSlug(key); parent = parent_info; ability_type = "spell" }
}

passives {
  default { key -> name = $t.makeSlug(key); parent = parent_info; ability_type = "passive" }
}

fixed nested_mappings { 
  "attacks"
  "heals"
  "spells"
  "passives"
}

hidden fixed children = List(attacks, heals, spells, passives).flatMap((x) -> x.toMap().values.toList())
