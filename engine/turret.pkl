module turret
extends "gamepiece_child.pkl"
import "parent_info.pkl" as ParentInfo
import "ability.pkl" as Ability
import "types.pkl" as $t
import "turret.pkl" as me
local methis = this

fixed type: String = "turret"
fixed subtype: String = turretType

hidden fixed extend_tags = (super.extend_tags) { 
  when (subtype == "turret") { "turret" } 
  when (subtype == "sacrifice") { "bonus:sacrifice" }
}
turretType: "turret" | "sacrifice" 

local parent_info: ParentInfo = new {
  id = methis.id
  slug = methis.slug
  src = methis.src
  fromPath = methis.parent.fromPath
}

attacks: Mapping<String, Ability> = (super.attacks) {
  default { key -> name = $t.makeSlug(key); parent = parent_info; abilityType = "attack" }
}
attack: Listing<String> = new {
  for (_attack in attacks) { _attack.slug }
}

heals: Mapping<String, Ability> = (super.heals) {
  default { key -> name = $t.makeSlug(key); parent = parent_info; abilityType = "heal" }
}
heal: Listing<String> = new {
  for (_heal in heals) { _heal.slug }
}

spells: Mapping<String, Ability> = (super.spells) {
  default { key -> name = $t.makeSlug(key); parent = parent_info; abilityType = "spell" }
}
spell: Listing<String> = new {
  for (_spell in spells) { _spell.slug }
}

passives: Mapping<String, Ability> = (super.passives) {
  default { key -> name = $t.makeSlug(key); parent = parent_info; abilityType = "passive" }
}
passive: Listing<String> = new {
  for (_passive in passives) { _passive.slug }
}

hidden fixed children = List(attacks, heals, spells, passives).flatMap((x) -> x.toMap().values.toList())
