/// gamepiece is the superclass for units, buildings, etc, and represents an on-screen, in-game object. 
abstract module gamepiece 
extends "entity.pkl"
import "entity.pkl"
import "add_on.pkl" as AddOn
import "parent_info.pkl" as ParentInfo
import "ability.pkl" as Ability
import "types.pkl" as $t
import "gamepiece.pkl" as me
local methis = this

hidden fixed dynamicTags {
  when (armorType != "none") { "armor:\(armorType)" }
  when ((gathersRichFlux ?? 0) > 0) { "gathers:flux" }
  when ((gathersFlux ?? 0) > 0) { "gathers:flux" }
  when ((gathersHexite ?? 0) > 0) { "gathers:hexite" }
  when ((gathersEmptyHexite ?? 0) > 0) { "gathers:hexite" }
  when (domain == "air") { "flyer" }
  when ((armor ?? 0) > 0) { "armored" }
  when ((provedsSupply ?? 0) > 0) { "supply" }
  when ((providesBiomass ?? 0) > 0) { "biomass" }
  when ((providesDetection ?? 0) > 0) { "detection" }
  when ((providesUpgradesFor?.length ?? 0) > 0) { "upgrades" }
  when ((shields ?? 0) > 0) { "shielded" }
  when ((abesEnergy ?? 0) > 0) { "abes" }
  when ((energy ?? 0) > 0) { "energy" }
  when ((stunResist ?? 0) > 0) { "resist:stun" }
  when ((maxAddOns ?? 0) > 0 && hasAddOnType == "turret") { "has:turrets" }
  when (hasAddOnType == "sacrifice") { "sacrifices" }
}

/// short description of the purpose of this, to be used in summaries in UI. Many of these won't be in game. 
/// examples: "fast melee attacker" for a unit, "vision buff" for an upgrade, etc
flavor: String?

/// hexite cost to build. 0 for gamepieces that are cast
hexiteCost: Number? 
fluxCost: Number?
buildCount: Number? = 1
cooldown: Number?
energyCost: Number?
energyCostType: $t.EnergyType? 
buildTime: Number?
rebuildable: Boolean?
rebuildTime: Number?
domain: $t.DomainType = "ground"

hotkey: $t.HotKey?

gathersFlux: Number? = fromPath.gathersFlux
gathersRichFlux: Number? = fromPath.gathersRichFlux

gathersHexite: Number? = fromPath.gathersHexite
gathersEmptyHexite: Number? = fromPath.gathersEmptyHexite

supply: Number? = fromPath.supply
hp: Number? = fromPath.hp
vision: Number? = fromPath.vision
speed: Number? = fromPath.speed
shields: Number? 
abesEnergy: Number? 
energy: Number?
armor: Number? = fromPath.armor

armorType: $t.ArmorType = fromPath.armorType ?? "none" 
stunResist: Number? 

provedsSupply: Number? = fromPath.provedsSupply
providesBiomass: Number? = fromPath.providesBiomass
providesDetection: Number?
providesUpgradesFor: Listing<String>(isDistinct)?
upgradedBy: Listing<String>(isDistinct)?

targetable: Boolean? = true

carryCapacity: Number?

maxAddOns: Number?
hasAddOnType: ("turret" | "sacrifice" | "building-upgrade" | "building-turret")? =
  if (addOns.length == 0) null 
  else throw("hasAddOnType must be set if turrets is used.")

local parentInfo: ParentInfo = new {
  id = methis.id
  slug = methis.slug
  src = methis.src
  fromPath = methis.fromPath
}

hidden attacks: Mapping<String, Ability> = new Mapping<String, Ability> {
  default { key -> name = key; parent = parentInfo; abilityType = "attack" }
}
attack: Mapping<String, Ability> = new {
  // for (h in attacks) { h.slug }
  for (n, a in attacks) { [a.slug] = a }
}

hidden heals: Mapping<String, Ability> = new Mapping<String, Ability> {
  default { key -> name = key; parent = parentInfo; abilityType = "heal" }
}
heal: Mapping<String, Ability> = new {
  // for (h in heals) { h.slug }
  for (n, h in heals) { [h.slug] = h }
}

hidden spells: Mapping<String, Ability> = new Mapping<String, Ability> {
  default { key -> name = key; parent = parentInfo; abilityType = "spell" }
}
spell: Mapping<String, Ability> = new {
  // for (s in spells) { s.slug }
  for (n, s in spells) { [s.slug] = s }
}

hidden passives: Mapping<String, Ability> = new Mapping<String, Ability> {
  default { key -> name = key; parent = parentInfo; abilityType = "passive" }
}
passive: Mapping<String, Ability> = new {
  // for (p in passives) { p.slug }
  for (n, p in spells) { [p.slug] = p }
}

hidden addOns: Mapping<String, AddOn> = new Mapping<String, AddOn> {
  default { key -> name = key; parent = parentInfo; addOnType = methis.hasAddOnType }
}
addOn: Mapping<String, AddOn> = new {
  // for (a in addOns) { a.slug }
  for (n, a in addOns) { [a.slug] = a }
}

hidden fixed children = List(attacks, heals, spells, passives, addOns).flatMap((x) -> x.toMap().values.toList())

