/// gamepiece is the superclass for units, buildings, etc, and represents an on-screen, in-game object. 
abstract module gamepiece 
extends "data.pkl"
import "ability.pkl"
import "attack.pkl" as Attack
import "heal.pkl" as Heal
import "spell.pkl" as Spell
import "passive.pkl" as Passive

import "types.pkl" as $t

/// short description of the purpose of this, to be used in summaries in UI. Many of these won't be in game. 
/// examples: "fast melee attacker" for a unit, "vision buff" for an upgrade, etc
role: String = ""

/// hexite cost to build. 0 for gamepieces that are cast
hexite_cost: UInt? 
flux_cost: UInt?
build_count: UInt? = 1
cooldown: UInt?
energy_cost: UInt?
topbar_cost: UInt?
build_time: UInt?
rebuildable: Boolean?
rebuild_time: UInt(rebuildable == true)?
domain: $t.DomainType = "ground"

hotkey: $t.HotKey?
tier: $t.Tier

supply: UInt((i) -> isUnit())?
hp: UInt?
vision: UInt?
speed: UInt?
shields: UInt?
abes_energy: UInt?
energy: UInt?
armor: UInt?

armor_type: $t.ArmorType = "none"
stun_resist: UInt?

provides_flux: UInt?
provides_hex: UInt?
provides_supply: UInt?
provides_biomass: UInt?
provides_upgrades_for: Listing<String>(isDistinct)?

transforms_from: Listing<String>(isDistinct)?
transforms_into: Listing<String>(isDistinct)?

primary_attack: Attack?
secondary_attack: Attack?
primary_heal: Heal?
spells: Listing<Spell>?
passives: Listing<Passive>?
