/// gamepiece is the superclass for units, buildings, etc, and represents an on-screen, in-game object.
abstract module gamepiece
extends "entity.pkl"
import "entity.pkl"
import "add_on.pkl" as AddOn
import "parent_info.pkl" as ParentInfo
import "ability.pkl" as Ability
import "types.pkl" as $t
import "gamepiece.pkl" as me
local methis = this

hidden fixed dynamicTags {
  when (armorType != "none") { "armor:\(armorType)" }
  when ((gathersRichFlux ?? 0) > 0) { "gathers:flux" }
  when ((gathersFlux ?? 0) > 0) { "gathers:flux" }
  when ((gathersHexite ?? 0) > 0) { "gathers:hexite" }
  when ((gathersEmptyHexite ?? 0) > 0) { "gathers:hexite" }
  when (domain == "air") { "flyer" }
  when ((armor ?? 0) > 0) { "armored" }
  when ((provedsSupply ?? 0) > 0) { "supply" }
  when ((providesBiomass ?? 0) > 0) { "biomass" }
  when ((providesDetection ?? 0) > 0) { "detection" }
  when ((providesUpgradesFor?.length ?? 0) > 0) { "upgrades" }
  when ((shields ?? 0) > 0) { "shielded" }
  when ((abesEnergy ?? 0) > 0) { "abes" }
  when ((energy ?? 0) > 0) { "energy" }
  when ((stunResist ?? 0) > 0) { "resist:stun" }
  when (hasAddOnType("sacrifice")) { "sacrifices" }
  when (hasAddOnType("turret")) { "has:turret" }
  when (hasAddOnType("building-turret")) { "building-upgrade:turret" }
  when (hasAddOnType("building-upgrade")) { "building-upgrade" }
  when (hasAbilityType("attack")) { "attacker" }
  when (hasAbilityType("heal")) { "healer" }
  when (hasAbilityType("spell")) { "spellcaster" }
  when (hasAbilityType("passive")) { "has:passive" }
  when (hasToggleType("siege")) { "sieges" }
  when (hasToggleType("attack")) { "alt-attack" }
  when (untargetable) { "untargetable" }
  when (rebuildable == true) { "respawns" }
}
function hasAddOnType(t: String) = addOns.toMap().values.any((a) -> a.addOnType == t)
function hasAbilityType(t: String) = abilities.toMap().values.any((a) -> a.abilityType == t)
function hasToggleType(t: String) = abilities.toMap().values.any((a) -> a.togglesMode == t)

hidden parent: ParentInfo?
hidden fixed subSlug: String = $t.makeSlug(name)

// um_parent: ParentInfo? = parent

fixed slug: $t.Slug =
  if (parent != null)
    "\(parent.slug)-\(subtype)-\(subSlug)\(appendSlug)"
  else
    super.slug

fixed belongsTo: String? = parent?.slug
fixed faction: String? = parent?.fromPath?.faction ?? super.faction

/// short description of the purpose of this, to be used in summaries in UI. Many of these won't be in game.
/// examples: "fast melee attacker" for a unit, "vision buff" for an upgrade, etc
flavor: String?

/// hexite cost to build. 0 for gamepieces that are cast
hexiteCost: Number?
fluxCost: Number?
buildCount: Number? = 1
cooldown: Number?
energyCost: Number?
energyCostType: $t.EnergyType?
buildTime: Number?
rebuildable: Boolean?
rebuildTime: Number?
domain: $t.DomainType = "ground"

hotkey: $t.HotKey?

gathersFlux: Number? = fromPath.gathersFlux
gathersRichFlux: Number? = fromPath.gathersRichFlux

gathersHexite: Number? = fromPath.gathersHexite
gathersEmptyHexite: Number? = fromPath.gathersEmptyHexite

supply: Number? = fromPath.supply
hp: Number? = fromPath.hp
vision: Number? = fromPath.vision
speed: Number? = fromPath.speed
shields: Number?
abesEnergy: Number?
energy: Number?
armor: Number? = fromPath.armor

armorType: $t.ArmorType = fromPath.armorType ?? "none"
stunResist: Number?

provedsSupply: Number? = fromPath.provedsSupply
providesBiomass: Number? = fromPath.providesBiomass
providesDetection: Number?
providesUpgradesFor: Listing<String>(isDistinct)?
upgradedBy: Listing<String>(isDistinct)?

untargetable: Boolean? = false

carryCapacity: Number?

maxAddOns: Number? = 0
local parentInfo: ParentInfo = new {
  id = methis.id
  slug = methis.slug
  src = methis.src
  fromPath = methis.fromPath
}

// um_me_parent = parentInfo

hidden abilities: Mapping<String, Ability> = new Mapping<String, Ability> {
  default { key -> name = key; parent = parentInfo }
}
fixed ability: Mapping<String, Ability> = new Mapping<String, Ability> {
  for (n, a in abilities) { [a.slug] = a }
}

hidden addOns: Mapping<String, AddOn> = new Mapping<String, AddOn> {
  default { key -> name = key; parent = parentInfo }
}

fixed addOn: Mapping<String, AddOn> = new {
  for (n, a in addOns) { [a.slug] = a }
}

variantOf: String?
variantOfId: String?
variantSiblings: List<String>?

hidden variants: Mapping<String, me> = new Mapping<String, me> {
  default { key -> name = key; parent = parentInfo; variantOf = methis.slug }
}
local allVariantSlugs = variants.toMap().values.map((v) -> v.slug).toList()

fixed variant: Mapping<String, me> = new {
  for (n, a in variants) {
    [a.slug] = a
  }
}

hidden fixed children = List(attacks, heals, spells, passives, addOns).flatMap((x) -> x.toMap().values.toList())
// hidden output {
//   files {
//     ["\(methis.id).json"] {
//       renderer = new JsonRenderer { indent = "" }
//       value = (methis.toDynamic()) {
//         variant = null
//         variantSlugs = allVariantSlugs
//       }
//     }
//     for (k, v in variant) {
//       ["\(v.id).json"] {
//         renderer = new JsonRenderer { indent = "" }
//         value = (v.toDynamic()) {
//           variantOf = methis.slug
//           variantOfId = methis.id
//         }
//       }
//     }
//   }
// }
