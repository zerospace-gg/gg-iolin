/// gamepiece is the superclass for units, buildings, etc, and represents an on-screen, in-game object. 
abstract module gamepiece 
extends "data.pkl"
import "ability/attack.pkl" as Attack
import "ability/heal.pkl" as Heal
import "ability/spell.pkl" as Spell
import "ability/passive.pkl" as Passive
import "turret/turret.pkl" as Turret

import "types.pkl" as $t

/// short description of the purpose of this, to be used in summaries in UI. Many of these won't be in game. 
/// examples: "fast melee attacker" for a unit, "vision buff" for an upgrade, etc
flavor: String?

/// hexite cost to build. 0 for gamepieces that are cast
hexite_cost: Number? 
flux_cost: Number?
build_count: Number? = 1
cooldown: Number?
energy_cost: Number?
topbar_cost: Number?
build_time: Number?
rebuildable: Boolean?
rebuild_time: Number?
domain: $t.DomainType = "ground"

hotkey: $t.HotKey?
tier: $t.Tier?

gathers_flux: Number?
gathers_rich_flux: Number?

gathers_hexite: Number?
gathers_empty_hexite: Number?

supply: Number?
hp: Number?
vision: Number?
speed: Number?
shields: Number?
abes_energy: Number?
energy: Number?
armor: Number?

armor_type: $t.ArmorType = "none"
stun_resist: Number?

provides_flux: Number?
provides_hex: Number?
provides_supply: Number?
provides_biomass: Number?
provides_detection: Number?
provides_upgrades_for: Listing<String>(isDistinct)?

upgraded_by: Listing<String>(isDistinct)?

transforms_from: Listing<String>(isDistinct)?
transforms_into: Listing<String>(isDistinct)?

max_turrets: Number?
turret_type: "turret" | "sacrifice"? =
  if (turrets.length == 0) null 
  else throw("turret_type must be set if turrets is used.")

local df = this.faction
local ds = this.slug

attacks: Listing<Attack> = new Listing<Attack> {
  default { faction = df; ability_of = ds }
}

heals: Listing<Heal> = new Listing<Heal> {
  default { faction = df; ability_of = ds }
}

spells: Listing<Spell> = new Listing<Spell> {
  default { faction = df; ability_of = ds }
}

passives: Listing<Passive> = new Listing<Passive> {
  default { faction = df; ability_of = ds }
}

turrets: Listing<Turret> = new Listing<Turret> {
  default { faction = df; turret_of = ds }
}
