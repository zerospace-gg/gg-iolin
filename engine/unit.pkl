module unit 
extends "gamepiece.pkl"
import "pkl:reflect"
import "parent_info.pkl" as ParentInfo
import "types.pkl" as $t
import "infuse.pkl" as infuse
import "unit_upgrade.pkl" as UnitUpgrade
import "constructing_unit.pkl" as ConstructingUnit
import "unit.pkl" as me
local methis = this
local meref = reflect.moduleOf(this)

fixed dynamicTags {
  when (methis.infusable) { "infusable" }
  when (methis.mindControllable) { "mind-controllable" }
}

constructingVersion: ConstructingUnit? 

vision: Number? = 1800

infusable: Boolean = subtype == "army" && !tags.toList().contains("massive")
mindControllable: Boolean = subtype != "hero"

hidden infuseRule: infuse.Rule = 
  if (!infusable) 
    null 
  else
    infuse.defaultRule

infuseCost: Number? = 
  if (!infusable) 
    null 
  else
    let (h = (hexiteCost ?? 0))
    let (f = (fluxCost ?? 0))
    let (b = (buildCount ?? 1))
    (((h + f) / b) / 10.0 ).floor + 1 // it may have been ceil but seedling cost was 1 before it was adjusted to 2 (seedling is 0 cost so 1 infuse means floor+1), but maybe 1 was a manual adjust and it was ceil all along


local parent_info: ParentInfo = new {
  id = methis.id
  slug = methis.slug
  src = methis.src
  fromPath = methis.fromPath
}

hidden upgrades: Mapping<String, UnitUpgrade> = new Mapping<String, UnitUpgrade> {
  default { key -> name = $t.makeSlug(key); parent = parent_info }
}
upgrade: Listing<String> = new {
  for (_upgrade in upgrades) { _upgrade.slug }
}

hidden fixed children = super.children + upgrades.toMap().values.toList()
