module unit 
extends "gamepiece.pkl"
import "pkl:reflect"
import "parent_info.pkl" as ParentInfo
import "types.pkl" as $t
import "unit_upgrade.pkl" as UnitUpgrade
import "constructing_unit.pkl" as ConstructingUnit
import "unit.pkl" as me
local methis = this
local meref = reflect.moduleOf(this)

fixed dynamicTags {
  when (methis.infusable) { "infusable" }
  when (methis.mindControllable) { "mind-controllable" }
}

hidden constructingVersion: Listing<ConstructingUnit> = new {
  default { key -> name = $t.makeSlug(key); parent = parentInfo }
}
fixed constructingFormId: String? = if (constructingVersion.length > 0) constructingVersion[0]?.id else null

vision: Number? = 1800

infusable: Boolean = subtype == "army" && !tags.toList().contains("massive")
mindControllable: Boolean = subtype != "hero"

hidden infuseRule: Mixin<me> = new {
  appendSlug = "-infused"
  name = "\(super.name) (Infused)"
  supply = super.supply * 2
  hp = super.hp * 2

  attacks {
    for (nm, _ in (super.attacks)) {
      [nm] { cooldown = if (super.cooldown != null) (super.cooldown / 2) else null }
    }
  }

  heals {
    for (nm, _ in (super.heals)) {
      [nm] { cooldown = if (super.cooldown != null) (super.cooldown / 2) else null }
    }
  }
}

hidden damageBasedInfuseRule: Mixin<me> = new {
  appendSlug = "-infused"
  name = "\(super.name) (Infused)"
  supply = super.supply * 2
  hp = super.hp * 2

  attacks {
    for (nm, _ in (super.attacks)) {
      [nm] {
        damage = if (super.damage != null) (super.damage * 2) else null
      }
    }
  }

  heals {
    for (nm, _ in (super.attacks)) {
      [nm] {
        damage = if (super.damage != null) (super.damage * 2) else null?.slug
      }
    }
  }
}

hidden fixed infusedVersion: me? = 
  if (!infusable) 
    null 
  else 
    (this |> infuseRule) { 
      infusable = false
      tags { "infused" } 
  }

fixed infused: String? = infusedVersion?.slug

infuseCost: Number? = 
  if (!infusable) 
    null 
  else
    let (h = (hexiteCost ?? 0))
    let (f = (fluxCost ?? 0))
    let (b = (buildCount ?? 1))
    (((h + f) / b) / 10.0 ).floor + 1 // it may have been ceil but seedling cost was 1 before it was adjusted to 2 (seedling is 0 cost so 1 infuse means floor+1), but maybe 1 was a manual adjust and it was ceil all along


local parentInfo: ParentInfo = new {
  id = methis.id
  slug = methis.slug
  src = methis.src
  fromPath = methis.fromPath
}

hidden upgrades: Mapping<String, UnitUpgrade> = new Mapping<String, UnitUpgrade> {
  default { key -> name = $t.makeSlug(key); parent = parentInfo; upgradeOf = methis.slug }
}
upgrade: Listing<String> = new {
  for (u in upgrades) { u.slug }
}

hidden fixed children = super.children +
  upgrades.toMap().values.toList() +
  (if (constructingFormId != null) 
    List(constructingVersion.toList().first) 
  else 
    List()) +
  if (infusedVersion != null) List(infusedVersion) else List()


