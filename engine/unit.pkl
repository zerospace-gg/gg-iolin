module unit
extends "gamepiece.pkl"
import "pkl:reflect"
import "parent_info.pkl" as ParentInfo
import "types.pkl" as $t
import "unit_upgrade.pkl" as UnitUpgrade
import "constructing_unit.pkl" as ConstructingUnit
import "unit.pkl" as me

local methis = this
local meref = reflect.moduleOf(this)

fixed dynamicTags {
  when (methis.infusable) { "infusable" }
  when (methis.mindControllable) { "mind-controllable" }
}

hidden constructingVersion: Listing<ConstructingUnit> = new {
  default { key -> name = $t.makeSlug(key); parent = parentInfo; }
}

vision: Number? = 1800

infusable: Boolean = subtype == "army" && !tags.toList().contains("massive")
mindControllable: Boolean = subtype != "hero"

variants {
  when (infusable) {
    ["\(methis.name) (Infused)"] = infusedForm
  }
  when (constructingVersion.toList().length > 0) {
    ["\(methis.name) (Constructing)"] = constructingVersion.toList().first
  }
}

hidden infuseRule: Mixin<me> = new {
  appendSlug = "-infused"
  name = "\(super.name) (Infused)"
  supply = super.supply * 2
  hp = super.hp * 2
  hexiteCost = 0
  fluxCost = 0

  abilities {
    for (nm, x in (super.abilities)) {
      [nm] = (x) {
        when ((x.abilityType == "attack" || x.abilityType == "heal") && x.cooldown != null) {
          cooldown = x.cooldown / 2
        }
      }
    }
  }
}

hidden damageBasedInfuseRule: Mixin<me> = new {
  appendSlug = "-infused"
  name = "\(super.name) (Infused)"
  supply = super.supply * 2
  hp = super.hp * 2

  abilities {
    for (nm, x in (super.abilities)) {
      [nm] = (x) {
        when ((x.abilityType == "attack" || x.abilityType == "heal") && x.damage != null) {
          damage = (x.damage ?? 0) * 2
        }
      }
    }
  }
}

hidden fixed infusedForm: me? =
  if (!infusable)
    null
  else
    (this |> infuseRule) {
      infusable = false
      infuseCost = null
      infuseRule = null
      tags { "infused" }
  }

infuseCost: Number? =
  if (!infusable)
    null
  else
    let (h = (hexiteCost ?? 0))
    let (f = (fluxCost ?? 0))
    let (b = (buildCount ?? 1))
    (((h + f) / b) / 10.0 ).floor + 1 // it may have been ceil but seedling cost was 1 before it was adjusted to 2 (seedling is 0 cost so 1 infuse means floor+1), but maybe 1 was a manual adjust and it was ceil all along


local parentInfo: ParentInfo = new {
  id = methis.id
  slug = methis.slug
  src = methis.src
  fromPath = methis.fromPath
}

hidden upgrades: Mapping<String, UnitUpgrade> = new Mapping<String, UnitUpgrade> {
  default { key -> name = $t.makeSlug(key); parent = parentInfo; upgradeOf = methis.slug }
}
upgrade: Mapping<String, UnitUpgrade> = new {
  for (u in upgrades) { [u.slug] = u }
}


hidden fixed children = super.children +
  upgrades.toMap().values.toList() +
  (if (constructingForm != null)
    List(constructingVersion.toList().first)
  else
    List()) +
  if (infusedForm != null) List(infusedForm) else List()
