open module ability
extends "child.pkl"
import "types.pkl" as $t
import "ability.pkl" as me
local methis = this

activationType: "auto" | "activated" | "passive" = 
  if (type == "attack") "auto"
  else if (type == "heal") "auto" 
  else if (type == "faction-passive") "passive"
  else if (type == "faction-talent") "passive"
  else "activated"

fixed type: String = "ability"
fixed subtype: String = fromPath.abilityType ?? abilityType
hidden abilityType: "attack" | "heal" | "spell" | "passive" | "toggle" 

name: String = 
  if (subtype == "attack") "Attack" 
  else if (subtype == "heal") "Heal"
  else if (subtype == "passive") "Passive"
  else null

hotkey: $t.HotKey?
reverseHotKey: $t.HotKey?
targets: Listing<$t.TargetType>
targetMode: $t.TargetMode?
requiresMode: String?
togglesMode: ("siege" | "attack")? 
energyCost: Number?
energyType: $t.EnergyType?
/// also called reloadTime
cooldown: Number?
cooldownAtBuild: Boolean?
duration: Number?
range: Number?
/// also called damage point, attack delay, or cast point
delay: Number?
abilityOf: String? = fromPath.abilityOf

shots: Number?
volleys: Number? 

teleport: Number?
providesDetection: Number? 

local function xPerSec(val: Number?, num_shots: Number?, num_volleys: Number?, cd: Number?) =
  if (val == null) null else 
  if (cd == null) null else
  let (amt = val)
  let (s = (num_shots ?? 1))
  let (vo = (num_volleys ?? 1))
  ((amt * s * vo) / cd).round().toInt()

effectArea: Number?

damage: Number?
damageOverTime: Number? // dps will have to change based on this as well
damagePerSec: Number? = 
  if (damageOverTime != null) null 
  else xPerSec(damage, shots, volleys, cooldown)
damageDisplay: String =
  "\(damage)"
  + (if ((shots ?? 1) > 1) " x\(shots)" else "")
  + (if ((volleys ?? 1) > 1) " x\(volleys)" else "")

healing: Number?
healingOverTime: Number?
healingPerSec: Number? = 
  if (healingOverTime != null) null 
  else xPerSec(healing, shots, volleys, cooldown)
healingDisplay: String =
  "\(healing)"
  + (if ((shots ?? 1) > 1) " x\(shots)" else "")
  + (if ((volleys ?? 1) > 1) " x\(volleys)" else "")

areaRange: Number?
areaDamage: Number?
areaOverTime: Number?

// like area, but splash should only be attached to a direct dmg amount
splashPercent: Number?
splashRange: Number?
splashOverTime: Number?
splashDisplay: String? = 
  if (splashPercent == null || splashRange == null) 
    null 
  else 
    "\(splashPercent)% over \(splashRange) range"

bonusPercent: Number?
bonusVsTags: Listing<String>?

requiresTurret: String?

autocast: "always" | "toggle" | "never" = 
  if (activationType == "auto") "always" else "never"
