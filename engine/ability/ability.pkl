abstract module ability
extends "../data.pkl"
import "../types.pkl" as $t

fixed type = "ability"

activation_type: "auto" | "activated" | "passive" = 
  if (primary) "auto" 
  else "activated"

ability_type: "attack" | "heal" | "spell" | "switch-attack" | "toggle-siege" | "faction-passive" | "topbar-power" = if (primary) "attack" else null

fixed subtype = 
  List(ability_of, ability_type, activation_type)
    .filter((i) -> i != "")
    .join("/")

hotkey: $t.HotKey?
reverse_hotkey: $t.HotKey?
targets: Listing<$t.TargetType>
target_mode: $t.TargetMode?
requires_mode: String?
toggles_mode: String?
energy_cost: UInt?
energy_type: $t.EnergyType?
/// also called reload_time
cooldown: Number?
cooldown_at_build: Boolean?
duration: Float?
range: UInt?
/// also called damage point, attack delay, or cast point
delay: Float?
ability_of: String?

num_casts: UInt?
shots_per_cast: UInt?

local function x_per_sec(val: UInt?, num: UInt?, shots: UInt?, cd: Number?) =
  if (val == null) null else 
  if (cd == null) null else
  let (v = val.toFloat())
  let (n = (num ?? 1).toFloat())
  let (s = (shots ?? 1).toFloat())
  ((v * n * s) / cd).round().toInt()

effect_area: UInt?

damage: UInt?
damage_over_time: UInt? // dps will have to change based on this as well
damage_per_sec: UInt? = 
  if (damage_over_time != null) null 
  else x_per_sec(damage, num_casts, shots_per_cast, cooldown)

healing: UInt?
healing_over_time: UInt?
healing_per_sec: UInt? = 
  if (healing_over_time != null) null 
  else x_per_sec(healing, num_casts, shots_per_cast, cooldown)

area_range: UInt?
area_damage: UInt?
area_over_time: UInt?

// like area, but splash should only be attached to a direct dmg amount
splash_percent: UInt?
splash_range: UInt?
splash_over_time: UInt?

bonus_percent: UInt?
bonus_vs_tags: Listing<String>?

autocast: "always" | "toggle" | "never" = 
  if (activation_type == "auto") "always" else "never"
