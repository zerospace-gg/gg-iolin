open module factionAbility
extends "data.pkl"
import "types.pkl" as $t
import "ability.pkl" as me
local methis = this

activationType: "activated" | "passive"

fixed type: String = "faction-ability"
fixed subtype: String = fromPath.abilityType ?? abilityType
hidden abilityType: "passive" | "topbar" | "talent" 

hotkey: $t.HotKey?
reverseHotKey: $t.HotKey?
targets: Listing<$t.TargetType>
targetMode: $t.TargetMode?
energyCost: Number?
energyType: $t.EnergyType?
cooldown: Number?
duration: Number?
range: Number?
delay: Number?

shots: Number?
volleys: Number? 

teleport: Number?
providesDetection: Number? 

local function xPerSec(val: Number?, numShots: Number?, numVolleys: Number?, cd: Number?) =
  if (val == null) null else 
  if (cd == null) null else
  let (amt = val)
  let (s = (numShots ?? 1))
  let (vo = (numVolleys ?? 1))
  ((amt * s * vo) / cd).round().toInt()

effectArea: Number?

damage: Number?
damageOverTime: Number? // dps will have to change based on this as well
damagePerSec: Number? = 
  if (damageOverTime != null) null 
  else xPerSec(damage, shots, volleys, cooldown)
damageDisplay: String =
  "\(damage)"
  + (if ((shots ?? 1) > 1) " x\(shots)" else "")
  + (if ((volleys ?? 1) > 1) " x\(volleys)" else "")

healing: Number?
healingOverTime: Number?
healingPerSec: Number? = 
  if (healingOverTime != null) null 
  else xPerSec(healing, shots, volleys, cooldown)
healingDisplay: String =
  "\(healing)"
  + (if ((shots ?? 1) > 1) " x\(shots)" else "")
  + (if ((volleys ?? 1) > 1) " x\(volleys)" else "")

areaRange: Number?
areaDamage: Number?
areaOverTime: Number?

// like area, but splash should only be attached to a direct dmg amount
splashPercent: Number?
splashRange: Number?
splashOverTime: Number?
splashDisplay: String? = 
  if (splashPercent == null || splashRange == null) 
    null 
  else 
    "\(splashPercent)% over \(splashRange) range"

bonusPercent: Number?
bonusVsTags: Listing<String>?
