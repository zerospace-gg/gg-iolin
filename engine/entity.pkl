/// root object of this engine. basic data type for all game objects & effects.
abstract module entity
import "pkl:reflect"
import "types.pkl" as $t
import "path_inspection.pkl" as $p
import "entity.pkl" as me
import "versioning.pkl"

local methis = this
local meref = reflect.moduleOf(this)
local isimpl = !meref.uri.matches(Regex("/engine/"))

hidden pathParts: List<String> = meref.uri
  .replaceAll(Regex(#"^.*/(faction|mercenary|nonplayer|map|engine)/"#), "$1/")
  .split("/")

hidden srcDirParts: List<String> = pathParts.dropLast(1)
hidden srcDirSlugs: List<String> = srcDirParts.map((x) -> x.replaceAll("_", "-"))
hidden fixed srcDir: String = srcDirParts.join("/")
hidden fixed srcFile: String = pathParts.takeLast(1).first
fixed src: String? = List(srcDir, srcFile).join("/")
fixed slug: $t.Slug = srcFile.replaceLast(".pkl", "").replaceAll("_", "-") + appendSlug
hidden appendSlug : String = ""
fixed id: $t.Id? = (srcDirSlugs + List(slug)).join("/")

hidden repoSlug = "zerospace-gg/gg-iolin";

/// metadata pulled from path. this includes things used in multiple subclasses
hidden fixed fromPath: $p.PathData = $p.dataFromPath(srcDirParts)

zsVersion: String? = versioning.zsVersion
ggVersion: String? = versioning.ggVersion
ggUpdated: String? = versioning.ggUpdated
ggRelease: String? = versioning.ggRelease

ggUrl: String? = "https://zerospace.gg/library/\(id)/";
githubUrl: String? = "https://github.com/\(repoSlug)/blob/main/zerospace/\(src)";
githubRawUrl: String? = "https://raw.githubusercontent.com/\(repoSlug)/main/zerospace/\(src)";

/// nicely formatted display name, as it appears in game (with the exception of things without lore names yet)
name: String

shortName: String = name

/// in-game description of this
description: String?

/// top-level type. overridden to a specific one of these by a subclass
fixed type: String = fromPath.type

/// sub-type. data subclasses will define this as a calculated field, based on a more
fixed subtype: String = fromPath.subtype ?? throw("cant find subtype in \(id): \(fromPath)")

/// faction name. required if type isn't map. should not be defined for faction type
fixed faction: String? = fromPath.faction

tier: $t.Tier? = fromPath.tier

/// tags used in calculating effects of parts of the game, such as `unit` or `vehicle` or `massive`. these should be static tags based on type.
hidden tags: Listing<String>

hidden fixed dynamicTags: Listing<String> = new {
  type
  when (type != subtype) { "\(type):\(subtype)" }
  when (faction != null) { "faction:\(faction)" }
  when (tier != null) { "tier:\(tier.replaceFirst("T", ""))" }
}

/// Used to add tags that are dependent on other fields
fixed tagList: Listing<String> = new Listing<String> {
  ...tags
  ...dynamicTags
  ...fromPath.tags
}.toList().distinct.toListing()
/// whether or not this exists in the game at the current version
inGame: Boolean = true

fromFuture: Boolean = false

/// additional notes and information about this gamepiece
notes: Listing<String>

/// creates handles things that build / produce / cast / otherwise create
creates: Listing<$t.Slug>(isDistinct)?
createdBy: Listing<$t.Slug>(isDistinct)?

/// unlocks handles things that allow other things the ability to build / produce / cast / otherwise create. should always be paired with unlockedBy on the other side.
unlocks: Listing<$t.Slug>(isDistinct)?
unlockedBy: Listing<$t.Slug>(isDistinct)?

/// currently only buildings do this, but its here because the other unlock/create logic is here. some non-gamepieces gamepieces unlock/create
unlocksMercTier: Listing<$t.Tier>(isDistinct)?

hidden fixed children: List<me> = List()
hidden fixed recursiveChildren: List<me> = children + children.flatMap((c) -> c.recursiveChildren)

// hidden fixed renderedFiles: Listing<String> = new Listing<String> {
//   "\(id).json"
//   for (child in recursiveChildren) { "\(child.id).json" }
// }

hidden output {
  files {
    ["\(id).json"] {
      renderer = new JsonRenderer { indent = "  " }
      value = methis
    }
    // for (child in recursiveChildren) {
    //   ["\(child.id).json"] {
    //     renderer = new JsonRenderer { indent = "" }
    //     value = child
    //   }
    // }
  }
}
