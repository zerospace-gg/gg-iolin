module zsgg_data

import ".../engine/building.pkl" as Building
import ".../engine/faction.pkl" as Faction
import ".../engine/map.pkl" as ZSMap
import ".../engine/talent.pkl" as Talent
import ".../engine/topbar.pkl" as TopBar
import ".../engine/unit.pkl" as Unit
import ".../engine/versioning.pkl" as versioning
import ".../engine/types.pkl" as $t

// grab everything at least one level down the tree
local all = import*("*/**pkl").toMap().values

zs_version: String = versioning.zs_version
zsgg_data_version: String = versioning.zsgg_data_version
zsgg_data_updated: String = versioning.zsgg_data_updated
release: String = versioning.release

local is_fac = (x) -> x.type == "faction" && x.subtype == "main"
local is_merc = (x) -> x.type == "faction" && x.subtype == "merc"
local is_nonplayer = (x) -> x.type == "faction" && x.subtype == "nonplayer"
local is_hero = (x) -> x.type == "unit" && x.subtype == "hero"
local is_unit = (x) -> x.type == "unit" && x.subtype != "hero"
local is_building = (x) -> x.type == "building"
local is_talent = (x) -> x.type == "faction-ability" && x.subtype == "talent"
local is_topbar = (x) -> x.type == "faction-ability" && x.subtype == "topbar"
local is_map = (x) -> x.type == "map"
local to_slug = (x) -> x.slug
local to_id = (x) -> x.id
local to_me = (x) -> x

class Index {
  type: ("faction" | "merc" | "nonplayer" | "hero" | "unit" | "building" | "talent" | "topbar" | "map")?
  id: String
  slug: String
  name: String
}

index: Map<String, Index> = all.map((x) -> new Index {
  when (is_fac.apply(x)) { type = "faction" }
  when (is_merc.apply(x)) { type = "merc" }
  when (is_nonplayer.apply(x)) { type = "nonplayer" }
  when (is_hero.apply(x)) { type = "hero" }
  when (is_unit.apply(x)) { type = "unit" }
  when (is_building.apply(x)) { type = "building" }
  when (is_talent.apply(x)) { type = "talent" }
  when (is_topbar.apply(x)) { type = "topbar" }
  when (is_map.apply(x)) { type = "map" }
  id = x.id 
  slug = x.slug
  name = x.name
}).toMap(to_slug, to_me)

slugs: Map<String, String> = all.toMap(to_slug, to_id)

faction: Map<String, Faction> = all.filter(is_fac).toMap(to_slug, to_me)
merc: Map<String, Faction> = all.filter(is_merc).toMap(to_slug, to_me)
nonplayer: Map<String, Faction> = all.filter(is_nonplayer).toMap(to_slug, to_me)

hero: Map<String, Unit> = all.filter(is_hero).toMap(to_slug, to_me)
unit: Map<String, Unit> = all.filter(is_unit).toMap(to_slug, to_me)
building: Map<String, Building> = all.filter(is_building).toMap(to_slug, to_me)

talent: Map<String, Talent> = all.filter(is_talent).toMap(to_slug, to_me)
topbar: Map<String, TopBar> = all.filter(is_topbar).toMap(to_slug, to_me)

maps: Map<String, ZSMap> = all.filter(is_map).toMap(to_slug, to_me)

local methis = this
hidden output {
  files {
    ["zsgg-data-full.json"] {
      renderer = new JsonRenderer { }
      value = methis
    }
  }
}

