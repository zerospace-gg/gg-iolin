import ".../engine/data.pkl" as Data
import ".../engine/building.pkl" as Building
import ".../engine/faction.pkl" as Faction
import ".../engine/map.pkl" as ZSMap
import ".../engine/talent.pkl" as Talent
import ".../engine/topbar.pkl" as TopBar
import ".../engine/unit.pkl" as Unit
import ".../engine/versioning.pkl" as versioning
import ".../engine/types.pkl" as $t

// grab everything at least one level down the tree
hidden all: List<Data> = import*("*/**pkl").toMap().filter((k,v) -> !k.startsWith("misc")).values

hidden zsVersion: String = versioning.zsVersion
hidden zsggDataVersion: String = versioning.zsggDataVersion
hidden zsggDataUpdated: String = versioning.zsggDataUpdated
hidden zsggDataEpoch: String = versioning.zsggDataEpoch
hidden release: String = versioning.release

hidden is_fac = (x) -> x.type == "faction" && x.subtype == "main"
hidden is_merc = (x) -> x.type == "faction" && x.subtype == "mercenary"
hidden is_nonplayer = (x) -> x.type == "faction" && x.subtype == "nonplayer"
hidden is_hero = (x) -> x.type == "unit" && x.subtype == "hero"
hidden is_unit = (x) -> x.type == "unit" && x.subtype != "hero"
hidden is_building = (x) -> x.type == "building"
hidden is_talent = (x) -> x.type == "faction-ability" && x.subtype == "talent"
hidden is_topbar = (x) -> x.type == "faction-ability" && x.subtype == "topbar"
hidden is_map = (x) -> x.type == "map"
hidden to_slug = (x) -> x.slug
hidden to_id = (x) -> x.id
hidden to_me = (x) -> x

function mklist(x: (Data) -> Boolean): Map<String, Data> = all.filter(x).toMap(to_slug, to_me)
function mkids(x: Map<String, Data>): List<String> = x.keys.toList()

hidden ids_to_slugs: Map<String, String> = all.toMap(to_id, to_slug)

hidden factions: Map<String, Faction> = mklist(is_fac)
hidden faction_ids: List<String> = mkids(factions)
hidden faction_count: Number = faction_ids.length

hidden mercenaries: Map<String, Faction> = mklist(is_merc)
hidden mercenary_ids: List<String> = mkids(mercenaries)
hidden mercenary_count: Number = mercenary_ids.length

hidden nonplayer_factions: Map<String, Faction> = mklist(is_nonplayer)
hidden nonplayer_faction_ids: List<String> = mkids(nonplayer_factions)
hidden nonplayer_faction_count: Number = nonplayer_faction_ids.length

hidden heroes: Map<String, Unit> = mklist(is_hero)
hidden hero_ids: List<String> = mkids(heroes)
hidden hero_count: Number = hero_ids.length

hidden units: Map<String, Unit> = mklist(is_unit)
hidden unit_ids: List<String> = mkids(units)
hidden unit_count: Number = unit_ids.length

hidden buildings: Map<String, Building> = mklist(is_building)
hidden building_ids: List<String> = mkids(buildings)
hidden building_count: Number = building_ids.length

hidden talents: Map<String, Talent> = mklist(is_talent)
hidden talent_ids: List<String> = mkids(talents)
hidden talent_count: Number = talent_ids.length

hidden topbar_powers: Map<String, TopBar> = mklist(is_topbar)
hidden topbar_power_ids: List<String> = mkids(topbar_powers)
hidden topbar_power_count: Number = topbar_power_ids.length

hidden maps: Map<String, ZSMap> = mklist(is_map)
hidden map_ids: List<String> = mkids(maps)
hidden map_count: Number = map_ids.length

hidden tagNames: List<String> = all.flatMap((x) -> x.tagList.toList()).distinct
hidden tags: Map<String, List<String>> = tagNames.toMap(to_me, (x) -> all.filter((y) -> y.tagList.toList().contains(x)).map(to_slug))

class DataIndex {
  type: String
  subtype: String
  faction: String?
  id: String
  slug: String
  name: String
  tagList: List<String>
}

hidden index: Map<String, DataIndex> = all.map((x) -> new DataIndex {
  type = x.type
  id = x.id 
  slug = x.slug
  name = x.name
  subtype = x.subtype
  faction = x.faction
  tagList = x.tagList.toList()
}).toMap(to_slug, to_me)

local methis = this
hidden output {
  files {}
}


